name: View release workflow

on:
  push:
    branches: ["develop"]
  pull_request:
    branches: ["master"]

jobs:
  versioning:
    runs-on: macos-latest-large
    outputs:
      new_version: ${{ steps.increment_version.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
      - name: Get Latest Commit Message
        id: get_commit_message
        run: echo "::set-output name=message::$(git log -1 --pretty=%B)"

      - uses: actions/checkout@v4
      - name: Increment Version
        id: increment_version
        run: |
          VERSION=$(cat VERSION)
          MESSAGE="${{ steps.get_commit_message.outputs.message }}"
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)

          if echo "$MESSAGE" | grep -iE 'revert|ft|feat|add|implements'; then
            MINOR=$((MINOR+1))
            PATCH=0
          elif echo "$MESSAGE" | grep -iE 'fix|patch|hotfix'; then
            PATCH=$((PATCH+1))
          elif echo "$MESSAGE" | grep -iE 'breaking|break|rc|chore'; then
            MAJOR=$((MAJOR+1))
            MINOR=0
            PATCH=0
          fi

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo $NEW_VERSION > VERSION
          git config user.name ${{ github.actor }}
          git config user.email ${{ github.actor }}@users.noreply.github.com


          git add VERSION
          git commit -m "Bump version to $NEW_VERSION"
          git config pull.rebase false
          git pull --rebase
          git push 
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT # Set output variable

  build:
    needs: versioning
    runs-on: macos-latest-large
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest, macos-latest-large]
        dart-version: [stable]
    steps:
      - uses: actions/checkout@v4
      - uses: dart-lang/setup-dart@9a04e6d73cca37bd455e0608d7e5092f881fd603
        with:
          sdk: ${{ matrix.dart-version }}

      - name: Install dependencies
        run: dart pub get

      - name: Run tests on Chrome (Dart2Wasm)
        run: dart test -p chrome --compiler dart2wasm

      - name: Run tests on Chrome (Dart2JS)
        run: dart test -p chrome --compiler dart2js

      - name: Create build directory
        run: mkdir build

      - name: Build for ${{ matrix.os }}
        run: dart compile exe bin/view.dart -o build/view-${{ matrix.os }}

      - name: Archive Production Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: view-${{ matrix.os }}
          path: build/view-${{ matrix.os }}

  release:
    needs: [versioning, build]
    runs-on: macos-latest-large
    strategy: # Add strategy for the release job
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest, macos-latest-large]
        include: # Map OS to asset names
          - os: ubuntu-latest
            asset_title: Linux
            asset_name: view-linux
          - os: windows-latest
            asset_title: Windows
            asset_name: view-windows.exe
          - os: macos-latest
            asset_title: macOS
            asset_name: view-macos
          - os: macos-latest-large
            asset_title: macOS Apple Silicon
            asset_name: view-macos-apple-silicon

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: view-${{ matrix.os }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.versioning.outputs.new_version }}-${{ matrix.os }}
          release_name: Release ${{ needs.versioning.outputs.new_version }} for ${{ matrix.asset_title }}
          body: |
            A ${{ matrix.os }} executable file is attached.

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./view-${{ matrix.os }}
          asset_name: ${{ matrix.asset_name}}
          asset_content_type: application/octet-stream
