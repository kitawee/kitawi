name: View release workflow

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        dart-version: [stable]
    steps:
      - uses: actions/checkout@v4
      - uses: dart-lang/setup-dart@9a04e6d73cca37bd455e0608d7e5092f881fd603
        with:
          sdk: ${{ matrix.dart-version }}

      - name: Install dependencies
        run: dart pub get

      - name: Run tests on Chrome (Dart2Wasm)
        run: dart test -p chrome --compiler dart2wasm

      - name: Run tests on Chrome (Dart2JS)
        run: dart test -p chrome --compiler dart2js

      - name: Create build directory
        run: mkdir build

      - name: Increment Version
        if: matrix.os == 'ubuntu-latest' # Only run this step once on ubuntu-latest
        run: |
          VERSION=$(cat VERSION)
          NEW_VERSION=$(echo $VERSION | awk -F. '{print $1 "." $2 "." ($3+1)}')
          echo $NEW_VERSION > VERSION
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add VERSION
          git commit -m "Bump version to $NEW_VERSION"
          git config pull.rebase false
          git pull --rebase
          git push 
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV  # Export to the environment for all jobs

      - name: Build for ${{ matrix.os }}
        run: dart compile exe bin/view.dart -o build/view-${{ matrix.os }}

      - name: Archive Production Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: view-${{ matrix.os }}
          path: build/view-${{ matrix.os }}

  release:
    needs: build # Ensure release job runs after build job is completed
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        asset_name: [view-linux, view-windows.exe, view-macos]
        asset_path:
          [view-ubuntu-latest, view-windows-latest.exe, view-macos-latest]
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.NEW_VERSION }}
          release_name: Release ${{ env.NEW_VERSION }}
          body: |
            This release includes executable assets for Windows, Linux, and macOS.

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ matrix.asset_path }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream
